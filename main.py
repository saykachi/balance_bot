from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import sqlite3
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
database_file = 'database.db'
conn = sqlite3.connect(database_file)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def create_tables():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        earnings REAL,
        admin TEXT,
        shift TEXT,
        is_on_shift BOOLEAN,
        platform TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS rating (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        earnings REAL
    )
    ''')
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
def add_user(user_id):
    cursor.execute('''
    INSERT INTO users (user_id, name, earnings, admin, shift, is_on_shift, platform)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, '', 0.0, '', '', False, ''))
    conn.commit()

create_tables()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥
def update_rating(user_id, earnings, name):
    cursor.execute('''
    INSERT INTO rating (user_id, earnings, name)
    VALUES (?, ?, ?)
    ON CONFLICT(user_id) DO UPDATE SET earnings = ?, name = ?
    ''', (user_id, earnings, name, earnings, name))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_data(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    return user_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
async def show_daily_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É
    cursor.execute("SELECT name, earnings FROM rating ORDER BY earnings DESC LIMIT 10")
    ranking = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    ranking_text = "üèÜ *–†–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
    for i, (name, earnings) in enumerate(ranking, 1):
        ranking_text += f"{i}. {name} - ${earnings}\n"

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(ranking_text, parse_mode='Markdown', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def show_admin_selection(update: Update):
    keyboard = [
        [InlineKeyboardButton("üßë‚Äçüíº –ê–¥–º–∏–Ω 1", callback_data="admin_1")],
        [InlineKeyboardButton("üßë‚Äçüíº –ê–¥–º–∏–Ω 2", callback_data="admin_2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëî *–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*", reply_markup=reply_markup, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
async def show_platform_selection(update: Update):
    keyboard = [
        [InlineKeyboardButton("LOYALFANS", callback_data="LOYALFANS")],
        [InlineKeyboardButton("MANYVIDS", callback_data="MANYVIDS")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üåê *–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:*", reply_markup=reply_markup, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_selection_markup():
    keyboard = [
        [InlineKeyboardButton("üßë‚Äçüíº –ê–¥–º–∏–Ω 1", callback_data="admin_1")],
        [InlineKeyboardButton("üßë‚Äçüíº –ê–¥–º–∏–Ω 2", callback_data="admin_2")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = get_user_data(user_id)

    if query.data == "show_daily_rating":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        await show_daily_rating(update, context)
    elif query.data == "back_to_main_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(query.message.chat_id, query._bot)

    if user_data is None:
        add_user(user_id)
        user_data = get_user_data(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    if query.data == "enter_name":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        context.user_data["state"] = "waiting_for_name"
    elif query.data == "admin_1" or query.data == "admin_2":
        admin_name = query.data.split("_")[1]
        cursor.execute("UPDATE users SET admin = ? WHERE user_id = ?", (admin_name, user_id))
        conn.commit()
        await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: *{admin_name}*", parse_mode='Markdown')
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await show_platform_selection(query)
    elif query.data == "LOYALFANS" or query.data == "MANYVIDS":
        platform_name = query.data
        cursor.execute("UPDATE users SET platform = ? WHERE user_id = ?", (platform_name, user_id))
        conn.commit()
        await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: *{platform_name}*", parse_mode='Markdown')
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        await show_shift_selection(query)
    elif query.data == "shift_00_06" or query.data == "shift_06_12" or query.data == "shift_12_18" or query.data == "shift_18_00":
        shift_time = query.data.split("_")[1] + " - " + query.data.split("_")[2]
        cursor.execute("UPDATE users SET shift = ? WHERE user_id = ?", (shift_time, user_id))
        conn.commit()
        await query.edit_message_text(f"üï∞Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–º–µ–Ω—É: *{shift_time}*", parse_mode='Markdown')
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await show_finish_registration(query)
    elif query.data == "start_shift":
        # –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
        await send_shift_start_message(context, user_id)
    elif query.data == "end_shift":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
        await send_shift_end_message(query, context, user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã
async def send_shift_start_message(context, user_id):
    user_data = get_user_data(user_id)
    name = user_data[1]
    shift = user_data[4]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üöÄ *–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã!*",
        parse_mode='Markdown'
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("UPDATE users SET is_on_shift = ? WHERE user_id = ?", (True, user_id))
    conn.commit()

# –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É
async def send_shift_end_message(query, context, user_id):
    user_data = get_user_data(user_id)
    name = user_data[1]  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin = user_data[3]  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    shift = user_data[4]  # –°–º–µ–Ω–∞
    earnings = user_data[2]  # –ó–∞—Ä–∞–±–æ—Ç–æ–∫
    platform = user_data[6]  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è Markdown):
    name = name.replace("_", "\_").replace("*", "\*").replace("[", "\[").replace("]", "\]")  # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    await context.bot.send_message(
        chat_id=user_id,
        text="‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞ —Å–º–µ–Ω—É:"
    )

    # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    context.user_data["state"] = "waiting_for_earnings"
    context.user_data["user_id"] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã
async def show_shift_selection(query):
    keyboard = [
        [InlineKeyboardButton("00:00 - 06:00", callback_data="shift_00_06")],
        [InlineKeyboardButton("06:00 - 12:00", callback_data="shift_06_12")],
        [InlineKeyboardButton("12:00 - 18:00", callback_data="shift_12_18")],
        [InlineKeyboardButton("18:00 - 00:00", callback_data="shift_18_00")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üï∞Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:*", reply_markup=reply_markup, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_finish_registration(query):
    await query.edit_message_text("‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", parse_mode='Markdown')
    await show_main_menu(query.message.chat_id, query._bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(chat_id, bot):
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_daily_rating")],
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", callback_data="start_shift")],
        [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data="end_shift")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id=chat_id, text="üìã *–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é*:", reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_input = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
    if context.user_data.get("state") == "waiting_for_name":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET name = ? WHERE user_id = ?", (user_input, user_id))
        conn.commit()

        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        context.user_data["state"] = "waiting_for_admin"

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await update.message.reply_text("üéâ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=await admin_selection_markup())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"
    elif context.user_data.get("state") == "waiting_for_earnings":
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET earnings = ? WHERE user_id = ?", (user_input, user_id))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_data(user_id)
        name = user_data[1]  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin = user_data[3]  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        shift = user_data[4]  # –°–º–µ–Ω–∞
        platform = user_data[6]  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        name = name.replace("_", "\_").replace("*", "\*").replace("[", "\[").replace("]", "\]")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        await context.bot.send_message(
            chat_id=-1002424831865,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≥—Ä—É–ø–ø—ã
            text=f"üèÅ <b>–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
                 f"üë§ <b>–ò–º—è:</b> {name}\n"
                 f"üßë‚Äçüíº <b>–ê–¥–º–∏–Ω:</b> {admin}\n"
                 f"üïí <b>–°–º–µ–Ω–∞:</b> {shift}\n"
                 f"üíµ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${user_input}\n"
                 f"üåê <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}",
            parse_mode='HTML'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–º–µ–Ω—É: ${user_input}. –°–ø–∞—Å–∏–±–æ!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update.message.chat_id, update._bot)

        # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        context.user_data["state"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def show_registration_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="enter_name")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üéâ *–ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.", reply_markup=reply_markup, parse_mode='Markdown')

# Your bot token here
BOT_TOKEN = '7635200135:AAG3n_WdCFAGQwtipLFqgaBKZyIoM1CC-vE'

def main():
    # Initialize bot application
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Handlers for commands
    application.add_handler(CommandHandler("start", show_registration_menu))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))


    # Start polling updates from Telegram
    application.run_polling()

if __name__ == "__main__":
    main()
